Adding System Call to SOS Kernel
================================

System call in SOS kernel provides modules a way to access kernel services
such as timer, dynamic memory, and messaging.  When a new kernel service is 
implemented, it is necessary to provide interface to modules.  

SOS uses jumptable to implement the access to the kernel interface.  
Whenever a module calls a system call, the control flow is directed to a 
pre-defined location in the memory, called jumptable.  The jumptable 
encodes machine instruction "jump" with the destination to the real 
implementation.  We choose this design to allow future changes of the 
SOS kernel without recompiling the SOS modules.  

In this page, we will describe how to add a system call to SOS kernel.  
We will show how to add a 'sys_foo' kernel system call.  The prototype is 
shown below.

[c]
source~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
int8_t sys_foo( int32_t bar );
source~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Implementing a System Call
--------------------------
A system call typically provides service for more than one module.  Therefore, 
the system call needs to know which module has just called.  In SOS, 
'ker_get_current_pid' is provided for this purpose.  In general, the system 
call can use all functions provided in the SOS kernel.  The prototypes of the 
functions can be found at $SOSROOT/kernel/include.

The code below implements 'sys_foo' system call.  

[c]
source~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
int8_t ker_sys_foo( int32_t bar )
{
	sos_pid_t calling_pid = ker_get_current_pid();

	//
	// Do something about 'bar' related to 'calling_pid'
	//
	return SOS_OK;
}
source~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

One should note that the name of the function is not 'sys_foo'.  
This is because 'sys_foo' will be used for providing the interface, 
which we will show later.  Instead by convension, we add prefix 'ker_' to 
the name of the system call.  

Other than the function name, the system call implementation is identical to 
a normal C function.  

Adding System Call to Jumptable
-------------------------------
Now we have 'sys_foo' implementation, we will add this new implementation to 
the jumptable.  The jumptable is machine architecture dependent.  Therefore, 
adding a system call means modification to all jumptables in all supported 
processor in SOS.  Further, one would have to write assembly language.  OK.  
One just needs to write one line assembly.  :)

The jumptable for the corresponding processor can be found in 
$SOSROOT/processor/<processor name>/sys_jmptable.S, where the <processor name> 
can be 'avr' or 'msp430'.  There are other processors supported by SOS, but 
the jumptable is not yet implemented as it requires someone to read the manual 
and figure out the right machine instruction.  Without jumptable does not mean 
one cannot use SOS on those processors.  It just that the loadable module is 
not yet supported.

Let's use AVR processor as an example.  The jumptable is in 
$SOSROOT/processor/avr/sys_jmptable.S.  Below is part of the file.

[c]
source~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
jmp ker_sys_codemem_read   ; 21
jmp ker_sys_shm_open       ; 22
jmp ker_sys_shm_update     ; 23
jmp ker_sys_shm_close      ; 24
jmp ker_sys_shm_get        ; 25
jmp ker_sys_shm_wait       ; 26
jmp ker_sys_shm_stopwait   ; 27
jmp ker_sys_foo            ; 28
source~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

As one can see, adding system call to the jumptable is merely copy and paste.  
The code is also very readable.  'jmp' refers to the jump instruction on AVR. 
The function name next to 'jmp' is the system call implementation, which one 
would have to change.  Anything after ';' is comment.  We recommand encoding 
the system call number, which one will need to implement the system call 
interface.  Here, we numbered ker_sys_foo 28, which we will use later.


Adding System Call Interface
----------------------------
Now we have implemented the system call and added it to the jumptable, 
modules still cannot access the system call.  To provide this access, we will 
need to add the interface to the $SOSROOT/kernel/include/sys_module.h.

sys_module.h is complicated because we sometimes need to emulate the jumptable 
behavior.  Below shows the implementation of the system call interface.  


[c]
source~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
typedef int8_t (*sys_foo_func_t)(int32_t bar);

static inline int8_t sys_foo( int32_t bar )
{
#ifdef SYS_JUMP_TBL_START
  return ((sys_foo_func_t)(SYS_JUMP_TBL_START+SYS_JUMP_TBL_SIZE*28))( bar );
#else
  return ker_sys_foo( bar );
#endif  
}
source~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The implementation can be separated into two parts.  The typedef defines the 
function pointer type, which allows us to "type-cast" the jumptable address 
into a function destination.  One should note the use of system call number 28, 
which is identical to the entry we added in the jumptable.  

The second part is for invoking the system call.  
The 'ifdef' section of the code is for invoking the system call via the 
jumptable.  When the jumptable is not implemented, 'else' section of the code is 
used, which simply invokes the system call implementation directly.  

To complete the implementation of the system call interface, one would need to 
declare the function prototype for the emulated version of system call.  This is 
located around line 30 in the sys_module.h shown below.  

[c]
source~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#ifndef SYS_JUMP_TBL_START
/// \cond NOTYPEDEF
void* ker_sys_malloc(uint16_t size);
void* ker_sys_realloc(void* pntr, uint16_t newSize);
...
int8_t ker_sys_foo(int32_t bar);
/// \endcond                                                    
#endif
source~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


