Installation Instructions
=========================

This section will guide you through the process of downloading and installing 
the compiler toolchain required to use SOS on your system. The SOS system is 
composed of two primary parts. The first is the core operating system kernel 
loaded onto nodes in the network before deployment. The second consists of end user 
applications that can be loaded on a deployed network at runtime. Both of 
the parts are written in C. Application developers use the GCC toolchain to 
compile SOS to the target of interest. This target may be a PC (used for 
simulation and for running SOS code on a microserver) or a specific hardware 
platform such as the Mica2 mote. 

The GCC toolchain uses three bundles of tools. These are:

*gcc-core*::
	Base C compiler. 
*binutils*::
	Binary tools. Used to manipulate the binary images produced by the C compiler. 
*libc*::
	C library providing basic facilites used in C programs. 

WARNING: Please beware that some older TinyOS distributions do not use the 
versions of tools described above. Systems using older TinyOS distributions 
will need to upgrade to current toolchains to use SOS.

A cross-compiler toolchain is needed to run SOS on a sensor node. *Cross-compiling* 
is the process of compiling a program to run on a machine of type Y using a 
compiler on a machine of type X. This is important in SOS, where a desktop 
computer compiles programs for various micro-controllers. More detailed 
toolchain installation instructions are provided below.

In addition, for programming AVR micro-controllers (on Mica2, Micaz etc.), you also require
a tool called UISP to interface with hardware in-system programmers.

The installation process requires that you:

- Obtain SOS 2.x distribution, either as a link:../downloads.html[release tarball],
or using SVN as described below
- Install libraries and tools for cross compilation
- Build and configure SOS utilities

This document assumes that your system has basic build tools such as GCC 
and a text editor (for instance, vi) already installed. 

These instructions have been tested on the following systems:

- <<linux, Debian Linux (or some derivative like Ubuntu)>> 
- <<mac, Power PC based Mac (Mac OS X 10.4.*)>>
- <<mac, Intel based Mac (Mac OS X 10.4.*)>>
- <<windows, Windows XP>>

NOTE: *Advanced users* who wish to use gdb and JTAG to debug their code directly 
on the hardware should follow the instructions <<advanced, here>>. It is suggested
that you first go through the instructions for installing a basic toolchain for SOS
for your system so that you setup the necessary environment variables that are also
used for installing the debug toolchain.

[[linux]]

Debian Linux (eg. Ubuntu)
-------------------------

Obtain SOS 2.x
~~~~~~~~~~~~~~

- Begin by installing some extra libraries used to compile the tool chain 
and SOS tools.  The following command should do the trick under Ubuntu: 

[c]
code~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
apt-get install flex subversion cvs libc6-dev
code~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

- Checkout the SOS 2.x source. Use the following command for anonymous
checkout:

[c]
code~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
svn co svn://projects.nesl.ucla.edu/sos-2x/trunk sos-2x
code~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

- Setup some environment variables before proceeding further. The installation
scripts depend on these variables for correct functioning. Edit the file
~/.bashrc with your favorite editor (vim) and add the following line
(you might have to change some paths depending on your setup):

[c]
code~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# SOSROOT points to the SOS 2.x directory downloaded on your system
export SOSROOT=~/sos-2x

# SOSTOOLDIR points to the directory where you want to install the toolchain
# (esp. the AVR tool chain).
# Keeping it in your home directory removes the need to have administrator
# (or root) privileges while installing the toolchain.
export SOSTOOLDIR=~/local

# SOSMSPTOOLDIR points to the directory where the MSP430 compiler
# tool chain is installed. For linux, it is the same as SOSTOOLDIR. 
export SOSMSPTOOLDIR=$SOSTOOLDIR

# Add the ./bin directory of the toolchain into the PATH
export PATH=$SOSTOOLDIR/bin:$PATH

# Add pysos to the python path
export PYTHONPATH=$PYTHONPATH:$SOSROOT/tools/utils/
code~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

NOTE: Make sure that the environment variables are set by either closing and 
reopening your terminal or sourcing the file with source ~/.bashrc. Next, create 
that folder with the following command: 

[c]
code~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
mkdir $SOSTOOLDIR.
code~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Install Libraries for Cross-compilation
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

- The AVR Tool Chain for Mica2 and Micaz
	* You will now need to install the following tool chain for cross compiling SOS 
	to the AVR target. Note that SOS tool chain is sensitive to versions. You are 
	free to experiment with more recent versions of these tools, but the SOS team 
	currently supports the versions listed below:
		. binutils-2.15
		. gcc-core-3.4.3
		. avr-libc-1.4.5
	* Make sure that you have defined the environment variables SOSTOOLDIR and
	SOSROOT.
	* To install the above tools, execute in terminal:

[c]
code~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
cd $SOSROOT/tools/src/avrgcc
source avrgcc.sh
code~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

TIP: Open the avrgcc.sh script in a text editor to see the sequence of
commands followed to download, compile and install the required tools.

- Download UISP from link:https://projects.nesl.ucla.edu/public/sos-2x/files/uisp/linux/[here]
and copy it to $SOSTOOLDIR/bin/ directory. Then execute

[c]
code~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
chmod +x $SOSTOOLDIR/bin/uisp
code~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

- The MSP430 Tool Chain for TMote Sky
	* Make sure that you have defined the environment variable SOSTOOLDIR as described above.
	* To install the toolchain, execute in terminal:

[c]
code~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
cd $SOSROOT/tools/src/mspgcc
source build-mspgcc.sh install
code~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

NOTE: It is a modified copy of the msp430 build script from TinyOS 1.x.

	* Link the msp430 software bootstrap loader (bsl) by executing the following command:

[c]
code~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
ln -s $SOSROOT/tools/src/mspgcc-pybsl/bsl.py $SOSTOOLDIR/bin/msp430-bsl
code~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

	* Download the FTDI chip drivers from link:http://www.ftdichip.com/Drivers/VCP.htm[here].
	Select the file relevant to your OS (You will probably not need this if your kernel
	version is 2.6.9 or higher). These are used to program the TMote over USB.

Configure SOS Utilities
~~~~~~~~~~~~~~~~~~~~~~~

- Execute in terminal:

[c]
code~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
cd $SOSROOT/tools/src/
sh sostools.sh
code~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Troubleshooting
~~~~~~~~~~~~~~~

If you program a TMote and msp430-bsl reports that it can't access the device, look at the output of 'dmesg'. If you can see there that brltty took over the serial port, then remove it by executing 'apt-get remove brltty'.


[[mac]]

PowerPC and Intel based Mac (Mac OS X 10.4.*)
---------------------------------------------

Suggested pre-requisites
~~~~~~~~~~~~~~~~~~~~~~~~

It is suggested that you install the following tools before downloading
SOS and building the tool chain. This will minimize the number of errors
that might occur during installation and later use.

- Download and install the latest version of *Xcode* from link:http://developer.apple.com/[here].
This will ensure that you have the required development libraries for gcc.
- Download and install *MacPorts* from link:http://trac.macosforge.org/projects/macports/browser/downloads/MacPorts-1.4.0/[here].
It is a tool (like Fink) to provide an easy way to download, configure and install
various open-source software products on the Darwin OS family. 

Obtain SOS 2.x
~~~~~~~~~~~~~~

- Begin by installing some extra libraries used to compile the tool chain 
and SOS tools. The following command should do the trick assuming you have
Mac Ports installed on your system:

[c]
code~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
sudo port install wget subversion
code~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

- Checkout the SOS 2.x source. Use the following command for anonymous
checkout:

[c]
code~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
svn co svn://projects.nesl.ucla.edu/sos-2x/trunk sos-2x
code~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

- Setup some environment variables before proceeding further. The installation
scripts depend on these variables for correct functioning. Edit the file
~/.profile with your favorite editor (vim) and add the following lines
depending on the processor type - PowerPC Vs Intel
(you might have to change some paths depending on your setup):

NOTE: The lines below are for *PowerPC* based Mac.

[c]
code~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# SOSROOT points to the SOS 2.x directory downloaded on your system
export SOSROOT=~/sos-2x

# SOSTOOLDIR points to the directory where you want to install the toolchain.
# Keeping it in your home directory removes the need to have administrator
# (or root) privileges while installing the toolchain.
export SOSTOOLDIR=~/local

# SOSMSPTOOLDIR points to the directory where the MSP430 compiler
# tool chain is installed.  
export SOSMSPTOOLDIR=$SOSTOOLDIR

# Add the ./bin directory of the toolchain into the PATH
export PATH=$SOSTOOLDIR/bin:$PATH

# Add pysos to the python path
export PYTHONPATH=$PYTHONPATH:$SOSROOT/tools/utils/
code~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

NOTE: The lines below are for *Intel* based Mac.

[c]
code~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# SOSROOT points to the SOS 2.x directory downloaded on your system
export SOSROOT=~/sos-2x

# SOSTOOLDIR points to the directory where you want to install the toolchain.
# Keeping it in your home directory removes the need to have administrator
# (or root) privileges while installing the toolchain.
export SOSTOOLDIR=~/local

# SOSMSPTOOLDIR points to the directory where the MSP430 compiler
# tool chain is installed. 
export SOSMSPTOOLDIR=$SOSTOOLDIR/msp430

# Add the ./bin directory of the toolchain into the PATH
export PATH=$SOSTOOLDIR/bin:$SOSMSPTOOLDIR/bin:$PATH

# Add pysos to the python path
export PYTHONPATH=$PYTHONPATH:$SOSROOT/tools/utils/
code~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

IMPORTANT: Make sure that the environment variables are set by either closing and 
reopening your terminal or sourcing the file with source ~/.profile. Next, create 
that folder with the following command: 

[c]
code~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
mkdir $SOSTOOLDIR
code~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Install Libraries for Cross-compilation
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

- The AVR Tool Chain for Mica2 and Micaz
	* You will now need to install the following tool chain for cross compiling SOS 
	to the AVR target. Note that SOS tool chain is sensitive to versions. You are 
	free to experiment with more recent versions of these tools, but the SOS team 
	currently supports the versions listed below:
		. binutils-2.15
		. gcc-core-3.4.3
		. avr-libc-1.4.5
	* Make sure that you have defined the environment variables SOSTOOLDIR and
	SOSROOT.
	* To install the above tools, execute in terminal:

[c]
code~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
cd $SOSROOT/tools/src/avrgcc
source avrgcc.sh
code~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	
TIP: Open the avrgcc.sh script in a text editor to see the sequence of
commands followed to download, compile and install the required tools.

- Download UISP from link:https://projects.nesl.ucla.edu/public/sos-2x/files/uisp/[here]
and copy it to $SOSTOOLDIR/bin/ directory. Then execute

[c]
code~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
chmod +x $SOSTOOLDIR/bin/uisp
code~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

NOTE: Choose the *macosx/* directory for PowerPC based Mac and *macosx_intel/* for
Intel based Mac on the website.

- The MSP430 Tool Chain for TMote Sky
	* Make sure that you have defined the environment variable SOSTOOLDIR as described above.
	* To install the toolchain, execute in terminal:

[c]
code~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
cd $SOSROOT/tools/src/mspgcc
source build-mspgcc.sh install
code~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

NOTE: It is a modified copy of the msp430 build script from TinyOS 1.x. For *Intel based Mac*, 
it downloads a pre-compied binary of the tool chain from an external website (thanks to 
link:http://userfs.cec.wustl.edu/~kak1/Black_Site/Home.html[Kevin Klues]),
and extracts it to $SOSTOOLDIR/msp430.

	* Link the msp430 software bootstrap loader (bsl) by executing the following command:

[c]
code~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
ln -s $SOSROOT/tools/src/mspgcc-pybsl/bsl.py $SOSTOOLDIR/bin/msp430-bsl
code~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

	* Download the FTDI chip drivers from link:http://www.ftdichip.com/Drivers/VCP.htm[here].
	Select the file relevant to your OS. These are used to program the TMote over USB.

Configure SOS Utilities
~~~~~~~~~~~~~~~~~~~~~~~

- Execute in terminal:

[c]
code~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
cd $SOSROOT/tools/src/
sh sostools.sh
code~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


[[windows]]

Windows XP
----------

Obtain SOS 2.x
~~~~~~~~~~~~~~

- Install link:http://winavr.sourceforge.net/[WinAVR]. 
The main page links to the source forge page from which you can 
download the WinAVR installer. This adds tools for cross compiling to 
the AVR chip set used on Mica2 and MicaZ nodes. 

- Install link:http://www.cygwin.com/[cygwin].
- Use the Cygwin _setup_ utility (same program used to install cygwin) to 
update the installation with additional packages:
	* Select _gcc_ from devel
	* Select _make_ from devel
	* Select _binutils_ from devel
	* Select _perl_ from devel
	* Select _subversion_ from devel
	* Select _flex_ from devel
	* Select _wget_ from web

NOTE: This creates a basic build environment within Cygwin for development of C programs. 
The following instructions are executed within cygwin, unless specified otherwise.

- Checkout the SOS 2.x source. Use the following command for anonymous
checkout:

[c]
code~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
svn co svn://projects.nesl.ucla.edu/sos-2x/trunk sos-2x
code~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

- Setup some environment variables in cygwin before proceeding further. The installation
scripts depend on these variables for correct functioning. Edit the file
~/.bashrc with your favorite editor and add the following line
(you might have to change some paths depending on your setup):

[c]
code~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# SOSROOT points to the SOS 2.x directory downloaded on your system
export SOSROOT=~/sos-2x

# SOSTOOLDIR points to the directory where you want to install the toolchain.
# Keeping it in your home directory removes the need to have administrator
# (or root) privileges while installing the toolchain.
export SOSTOOLDIR=~/local

# SOSMSPTOOLDIR points to the directory where the MSP430 compiler
# tool chain is installed. This is assuming that you install
# mspgcc in its default location (C:\mspgcc). The link
# for downloading mspgcc is provided below.
export SOSMSPTOOLDIR=/cygdrive/c/mspgcc

# Add the ./bin directory of the toolchain into the PATH
export PATH=$SOSTOOLDIR/bin:$SOSMSPTOOLDIR/bin:$PATH

# Add pysos to the python path
export PYTHONPATH=$PYTHONPATH:$SOSROOT/tools/utils/
code~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

NOTE: Make sure that the environment variables are set by either closing and 
reopening your terminal or sourcing the file with source ~/.bashrc. Next, create 
that folder with the following command: 

[c]
code~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
mkdir $SOSTOOLDIR.
code~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Install Libraries for Cross-compilation
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
- AVR tool chain for Mica2 and Micaz
	* Already installed with WinAVR above.
	* Download a patched version of uisp from 
	link:https://projects.nesl.ucla.edu/public/sos-2x/files/uisp/winxp/[here].
	This patched version is required for use of the CrossBow programming boards. 
	Save the binary into the "/usr/bin" directory of the Cygwin installation,
	and modify its permissions to make it executable (chmod +x /usr/bin/uisp.exe), 
	if required.

- MSP430 tool chain
	* Download and install mspgcc from 
	link:http://mspgcc.sourceforge.net/manual/c49.html#windows-installation[here]. 

IMPORTANT: Both WinAVR and mspgcc also come with their own versions of cygwin1.dll
file. This may not work correctly with the latest cygwin1.dll that comes with
cygwin. So, you will probably get a fatal error while trying to execute msp430-gcc. 
To avoid this, search for cygwin1.dll, and rename all the versions of
this file, found in all the directories *EXCEPT* the one in cygwin/bin, to cygwin1_backup.dll.

	* Download the FTDI chip drivers from link:http://www.ftdichip.com/Drivers/VCP.htm[here].
	Select the file relevant to your OS. These are used to program the TMote over USB.

Configure SOS Utilities
~~~~~~~~~~~~~~~~~~~~~~~

- Execute in cygwin:

[c]
code~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
cd $SOSROOT/tools/src/
sh sostools.sh
code~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

[[advanced]]

Advanced Users
--------------

With SOS, you can use gdb and JTAG to debug your code while executing on the hardware
node. Follow the steps according to the platform that you are using:

- <<tmote, Tmote Sky>> 
- <<mica, MicaZ/Mica2 motes>> 

[[tmote]]

Debugging Tmote Sky with GDB
----------------------------

This link:http://www.eecs.harvard.edu/~mdw/proj/tmote-gdb/[website] serves as a good
starting point on how to set up a debugging environment in linux. Go through this
to understand the hardware and software tools required, but follow the exact 
instructions given below as the instructions given there seem to be tested on
an older version of Fedora Core linux.

The instructions given below are for using MSP-430FETUIF USB debugging
interface (JTAG) available from 
link:http://focus.ti.com/docs/toolsw/folders/print/msp-fet430uif.html[TI].

To get it working, you will need to install the following toolchain: 

- msp430-gdb
- libHIL.so for JTAG
- msp430-gdbproxy

The following instructions have only been tested on Ubuntu, but will most probably work 
on latest Redhat/Fedora Core distributions as well. The drivers for the TI USB-serial chip
are already included in the kernel versions >= 2.6.20 
(link:http://www.moteiv.com/community/Debugging_Tmote_Sky_with_GDB[source]).

- GDB 6.0: The instructions are taken from this German 
link:http://www.mikrocontroller.net/articles/MSPGCC#gdb[website].
- On a fresh Ubuntu installation, make sure you have the following things
installed: 'apt-get install gcc-3.4 ncurses-dev

[c]
code~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
$ wget http://mirrors.redwire.net/pub/sources.redhat.com/gdb/old-releases/gdb-6.0.tar.bz2
$ tar xjvf gdb-6.0.tar.bz2
 
$ cvs -d:pserver:anonymous@mspgcc.cvs.sourceforge.net:/cvsroot/mspgcc login
$ cvs -z3 -d:pserver:anonymous@mspgcc.cvs.sourceforge.net:/cvsroot/mspgcc co gdb/gdb-current
$ cp -r gdb/gdb-current/* gdb-6.0/

$ cd gdb-6.0
$ CC=gcc-3.4 ./configure --prefix=$SOSMSPTOOLDIR --target=msp430
$ make
$ make install
$ cd ..
code~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Create .gdbinit in your $HOME directory and add the following lines to it. 
It is assumed that you will use port 2000 for msp430-gdbproxy as shown 
link:http://www.eecs.harvard.edu/~mdw/proj/tmote-gdb/[here].

[c]
code~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
set remoteaddresssize 16
set remotetimeout 999999
set download-write-size 512
target remote localhost:2000
set remote memory-write-packet-size 512
set remote memory-write-packet-size fixed
set remote memory-read-packet-size 512
set remote memory-read-packet-size fixed
code~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

- JTAG
	* The instructions are taken from this 
	link:http://www.mikrocontroller.net/articles/MSPGCC#JTAG[website] again.

[c]
code~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
$ cvs -d:pserver:anonymous@mspgcc.cvs.sourceforge.net:/cvsroot/mspgcc login
$ cvs -z3 -d:pserver:anonymous@mspgcc.cvs.sourceforge.net:/cvsroot/mspgcc co jtag
$ cd jtag/hardware_access
code~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

WARNING: Make sure to modify the CFLAGS and LNOPTS as shown if you are
using 64-bit Linux.

[c]
code~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
CFLAGS  += -fPIC -m32
LNOPTS   = -fPIC -shared -m32
code~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Finally, execute

[c]
code~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
$ make
$ mv libHIL.so $SOSMSPTOOLDIR/lib
$ sudo ldconfig
$ cd ../..
code~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

- msp430-gdbproxy
	* It uses libMSP430.so. Download msp430-gdbproxy and libMSP430.so from 
	link:http://www.soft-switch.org/downloads/mspgcc[here]. Execute the following
	commands taken from 
	link:http://www.mikrocontroller.net/articles/MSPGCC#gdbproxy[here]. 

[c]
code~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
$ chmod +x msp430-gdbproxy
$ mv msp430-gdbproxy $SOSMSPTOOLDIR/bin
$ mv libMSP430.so $SOSMSPTOOLDIR/lib/
code~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

- Add a rule to udev to select an appropriate configuration of TI USB-serial 
converter. The file needs to go to "/etc/udev/rules.d/26-ti.rules" under
Ubuntu Linux and should contain:

[c]
code~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
SUBSYSTEM=="usb_device" ACTION=="add" \
  SYSFS{product}=="MSP-FET430UIF JTAG Tool", \
  SYSFS{bNumConfigurations}=="2", \
  SYSFS{bConfigurationValue}=="1", \
  RUN+="/bin/sh -c 'echo 2 >/sys%p/device/bConfigurationValue'"
code~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Note that the udev rule file for ubuntu must be called
"26-ti.rules", instead of "026_ti" or else ubuntu won't detect the TI
USB-serial converter.

- Make sure that you set the LD_LIBRARY_PATH in your .bashrc as 'export
LD_LIBRARY_PATH=$SOSMSPTOOLDIR/lib'

- Follow the usage of msp430-gdbproxy and msp430-gdb given 
link:http://www.eecs.harvard.edu/~mdw/proj/tmote-gdb/[here] to debug your code.
Add CFLAGS += -g to $SOSROOT/processor/msp430/Makerules before compiling
your code. Use .elf extension intead of .exe as described in that website.
An example execution for msp430-gdbproxy looks like this:

[c]
code~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
msp430-gdbproxy --port=2000 msp430 /dev/ttyUSB0
code~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

- msp430-gdbproxy might complain of older/incompatible firmware version on the 
TI USB FET when you first connect it to your computer. Fortunately, gdbproxy contains the code to do just that. If your USB FET is unresponsive about the firmware version, you can upgrade the USB FET through the following command:

[c]
code~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
msp430-gdbproxy.exe msp430 --update-usb-fet TIUSB
code~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The following output should be produced:

[c]
code~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
$ msp430-gdbproxy.exe msp430 --update-usb-fet TIUSB
notice:    msp430: TI USB FET update requested
notice:    msp430: Initializing bootloader...
notice:    msp430: Erasing interrupt vectors...
notice:    msp430: Erasing firmware...
notice:    msp430: Programming new firmware...
notice:    msp430: 0% programmed.
....
notice:    msp430: Finishing...
notice:    msp430: Update Complete.
code~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

- References:
	* link:http://www.mikrocontroller.net/articles/MSPGCC[http://www.mikrocontroller.net/articles/MSPGCC]
	* link:http://www.eecs.harvard.edu/~mdw/proj/tmote-gdb/[Matt Welsh]

[[mica]]

Debugging MicaZ/Mica2 motes with GDB
------------------------------------

With SOS, you can use AVR gdb to debug your code while executing on the hardware node. 
AVR gdb uses Avarice to interface with the JTAG. In this section, we assume that 

- you have installed the necessary drivers for your JTAG device.
- and, you have defined the $SOSROOT and $SOSTOOLDIR enviroment variables as described
above.

Obtaining the tools
~~~~~~~~~~~~~~~~~~~

We use the following versions of tools:

- AVR gdb 6.0
	* You can download gdb-6.0.tar.bz2 from the 
	link:http://ftp.gnu.org/gnu/gdb/[GNU GDB FTP server].
	
NOTE: For Ubuntu users, no need to download the above source as AVR gdb is installed using
the Synaptic package manager, or _apt-get_ command, included in the Ubuntu disribution.

- Avarice 2.4
	* You can download avarice-2.4.tar.bz2 from the 
	link:http://avarice.sourceforge.net/[Avarice Sourceforge website].

NOTE: You can try using the latest versions of these tools, and let us know if they work
fine too. We will update this section accordingly. :-)

Installation
~~~~~~~~~~~~

To use Avarice, you first need to build libbfd.a from binutils distribution downloaded
during the basic toolchain installation. If you followed the above instructions for 
installation of SOS tool chain, binutils-2.15 would have been downloaded in 
$SOSROOT/tools/src/avrgcc/ directory. If that's not the case, then 

- you can download binutils-2.15.tar.gz from the
link:http://ftp.gnu.org/gnu/binutils/[GNU Binutils FTP server]. 
- Next, extract the source from the tarball using

[c]
code~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
$ tar zxvf binutils-2.15.tar.gz
code~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

- To build and install libbfd.a, execute the following instructions in the
directory where you extracted the tarball. 

[c]
code~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
$ cd binutils-2.15/bfd
$ ./configure --target=avr --prefix=$SOSTOOLDIR --disable-nls --enable-install-libbfd
$ make
$ make install
code~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Next, this section describes steps for installing AVR gdb and Avarice on the 
following platforms:

- <<macadv, Intel or PowerPC based Mac (Mac OS X 10.4.*)>>
- <<linuxadv, Debian Linux (or some derivative like Ubuntu)>> 

[[macadv]]

Intel or PowerPC based Mac (Mac OS X 10.4.*)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

- Installing AVR gdb 6.0
	* Execute the following instructions in the directory where you downloaded
	AVR gdb 6.0

[c]
code~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
$ tar jxvf gdb-6.0.tar.bz2
$ cd gdb-6.0
$ ./configure --target=avr --prefix=$SOSTOOLDIR
$ make
$ make install
code~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

- Installing Avarice
	* Execute the following instructions in the directory where you downloaded
	Avarice 2.4

[c]
code~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
$ tar jxvf avarice-2.4.tar.bz2
$ cd avarice-2.4
code~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

	* For Intel Mac ONLY, execute the following command

[c]
code~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
$ ./configure "LDFLAGS=-L$SOSTOOLDIR/i686-apple-darwinX.X.X/avr/lib -L$SOSTOOLDIR/lib" 
"CPPFLAGS=-I$SOSTOOLDIR/i686-apple-darwinX.X.X/avr/include" --prefix=$SOSTOOLDIR
code~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

NOTE: X.X.X can vary depending on your MAC OS X version. It is 8.9.1 for my MAC OS 10.4.9

	* For Power PC Mac ONLY, execute the following command

[c]
code~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
$ ./configure "LDFLAGS=-L$SOSTOOLDIR/powerpc-apple-darwinX.X.X/avr/lib -L$SOSTOOLDIR/lib" 
"CPPFLAGS=-I$SOSTOOLDIR/powerpc-apple-darwinX.X.X/avr/include" --prefix=$SOSTOOLDIR
code~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

NOTE: X.X.X can vary depending on your MAC OS X version. It is 8.4.4 for my MAC OS 10.4.4

	* Next, execute the following commands irrespective of Intel or PowerPC processor

[c]
code~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
$ make
$ make install
code~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

[[linuxadv]]

Debian Linux (eg. Ubuntu)
~~~~~~~~~~~~~~~~~~~~~~~~~

- Installing AVR gdb
	* Execute the following command.

[c]
code~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
$ sudo apt-get install gdb-avr
code~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

NOTE: This will install version 6.4 of avr-gdb. It seems to work fine, except that
it gives a _putpkt_ error while quiting avr-gdb. Ideally, we would like to install
and use version 6.0, but we were unable to build it successfully. If someone
is able to do that, please let us know how to go about it. :-)

- Installing Avarice
	* Execute the following instructions in the directory where you downloaded
	Avarice 2.4

[c]
code~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
$ tar jxvf avarice-2.4.tar.bz2
$ cd avarice-2.4
$ ./configure "LDFLAGS=-L$SOSTOOLDIR/i686-pc-linux-gnu/avr/lib -L$SOSTOOLDIR/lib" 
"CPPFLAGS=-I$SOSTOOLDIR/i686-pc-linux-gnu/avr/include" --prefix=$SOSTOOLDIR
$ make
$ make install
code~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

