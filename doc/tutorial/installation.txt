Installation Instructions
=========================

This section will guide you through the process of downloading and installing 
the compiler toolchain required to use SOS on your system. The SOS system is 
composed of two primary parts. The first is the core operating system kernel 
loaded onto nodes in the network before deployment. The second consists of end user 
applications that can be loaded on a deployed network at runtime. Both of 
the parts are written in C. Application developers use the GCC toolchain to 
compile SOS to the target of interest. This target may be a PC (used for 
simulation and for running SOS code on a microserver) or a specific hardware 
platform such as the Mica2 mote. 

The GCC toolchain uses three bundles of tools. These are:

*gcc-core*::
	Base C compiler. 
*binutils*::
	Binary tools. Used to manipulate the binary images produced by the C compiler. 
*libc*::
	C library providing basic facilites used in C programs. 

WARNING: Please beware that some older TinyOS distributions do not use the 
versions of tools described above. Systems using older TinyOS distributions 
will need to upgrade to current toolchains to use SOS.

A cross-compiler toolchain is needed to run SOS on a sensor node. *Cross-compiling* 
is the process of compiling a program to run on a machine of type Y using a 
compiler on a machine of type X. This is important in SOS, where a desktop 
computer compiles programs for various micro-controllers. More detailed 
toolchain installation instructions are provided below.

The installation process requires that you:

- Obtain SOS 2.x distribution, either as a link:../downloads.html[release tarball],
or using SVN as described below
- Install libraries and tools for cross compilation
- Build and configure SOS utilities

This document assumes that your system has basic build tools such as GCC 
and a text editor (for instance, vi) already installed. 

These instructions have been tested on the following systems:

- <<linux, Debian Linux (or some derivative like Ubuntu)>> 
- <<mac, Power PC based Mac (Mac OS X 10.4.*)>>
- <<mac, Intel based Mac (Mac OS X 10.4.*)>>
- <<windows, Windows XP>>

[[linux]]

Debian Linux (eg. Ubuntu)
-------------------------

Obtain SOS 2.x
~~~~~~~~~~~~~~

- Begin by installing some extra libraries used to compile the tool chain 
and SOS tools.  The following command should do the trick under Ubuntu: 

[c]
code~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
apt-get install flex subversion cvs libc6-dev
code~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

- Checkout the SOS 2.x source. Use the following command for anonymous
checkout:

[c]
code~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
svn co svn://projects.nesl.ucla.edu/sos-2x/trunk sos-2x
code~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

- Setup some environment variables before proceeding further. The installation
scripts depend on these variables for correct functioning. Edit the file
~/.bashrc with your favorite editor (vim) and add the following line
(you might have to change some paths depending on your setup):

[c]
code~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# SOSROOT points to the SOS 2.x directory downloaded on your system
export SOSROOT=~/sos-2x

# SOSTOOLDIR points to the directory where you want to install the toolchain
# (esp. the AVR tool chain).
# Keeping it in your home directory removes the need to have administrator
# (or root) privileges while installing the toolchain.
export SOSTOOLDIR=~/local

# SOSMSPTOOLDIR points to the directory where the MSP430 compiler
# tool chain is installed. For linux, it is the same as SOSTOOLDIR. 
export SOSMSPTOOLDIR=$SOSTOOLDIR

# Add the ./bin directory of the toolchain into the PATH
export PATH=$SOSTOOLDIR/bin:$PATH
code~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

NOTE: Make sure that the environment variables are set by either closing and 
reopening your terminal or sourcing the file with source ~/.bashrc. Next, create 
that folder with the following command: 

[c]
code~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
mkdir $SOSTOOLDIR.
code~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Install Libraries for Cross-compilation
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

- The AVR Tool Chain for Mica2 and Micaz
	* You will now need to install the following tool chain for cross compiling SOS 
	to the AVR target. Note that SOS tool chain is sensitive to versions. You are 
	free to experiment with more recent versions of these tools, but the SOS team 
	currently supports the versions listed below:
		. binutils-2.15
		. gcc-core-3.4.3
		. avr-libc-1.4.5
	* Make sure that you have defined the environment variables SOSTOOLDIR and
	SOSROOT.
	* To install the above tools, execute in terminal:

[c]
code~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
cd $SOSROOT/tools/src/avrgcc
source avrgcc.sh
code~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	
TIP: Open the avrgcc.sh script in a text editor to see the sequence of
commands followed to download, compile and install the required tools.
It also copies the correct pre-compiled binary of uisp which is 
required to program the embedded target.

- The MSP430 Tool Chain for TMote Sky
	* Make sure that you have defined the environment variable SOSTOOLDIR as described above.
	* To install the toolchain, execute iin terminal:

[c]
code~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
cd $SOSROOT/tools/src/mspgcc
source build-mspgcc.sh install
code~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

NOTE: It is a modified copy of the msp430 build script from TinyOS 1.x.

	* Link the msp430 software bootstrap loader (bsl) by executing the following command:

[c]
code~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
ln -s $SOSROOT/tools/src/mspgcc-pybsl/bsl.py $SOSTOOLDIR/bin/msp430-bsl
code~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

	* Download the FTDI chip drivers from link:http://www.ftdichip.com/Drivers/VCP.htm[here].
	Select the file relevant to your OS (You will probably not need this if your kernel
	version is 2.6.9 or higher). These are used to program the TMote over USB.

Configure SOS Utilities
~~~~~~~~~~~~~~~~~~~~~~~

- Execute in terminal:

[c]
code~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
cd $SOSROOT/tools/src/
sh sostools.sh
code~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


[[mac]]

PowerPC and Intel based Mac (Mac OS X 10.4.*)
---------------------------------------------

Suggested pre-requisites
~~~~~~~~~~~~~~~~~~~~~~~~

It is suggested that you install the following tools before downloading
SOS and building the tool chain. This will minimize the number of errors
that might occur during installation and later use.

- Download and install the latest version of *Xcode* from link:http://developer.apple.com/[here].
This will ensure that you have the required development libraries for gcc.
- Download and install *DarwinPorts* from link:http://darwinports.opendarwin.org/[here].
It is a tool (like Fink) to provide an easy way to download, configure and install
various open-source software products on the Darwin OS family. 

Obtain SOS 2.x
~~~~~~~~~~~~~~

- Begin by installing some extra libraries used to compile the tool chain 
and SOS tools. The following command should do the trick assuming you have
Darwin Ports installed on your system:

[c]
code~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
sudo port install wget subversion
code~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

- Checkout the SOS 2.x source. Use the following command for anonymous
checkout:

[c]
code~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
svn co svn://projects.nesl.ucla.edu/sos-2x/trunk sos-2x
code~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

- Setup some environment variables before proceeding further. The installation
scripts depend on these variables for correct functioning. Edit the file
~/.profile with your favorite editor (vim) and add the following lines
depending on the processor type - PowerPC Vs Intel
(you might have to change some paths depending on your setup):

NOTE: The lines below are for *PowerPC* based Mac.

[c]
code~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# SOSROOT points to the SOS 2.x directory downloaded on your system
export SOSROOT=~/sos-2x

# SOSTOOLDIR points to the directory where you want to install the toolchain.
# Keeping it in your home directory removes the need to have administrator
# (or root) privileges while installing the toolchain.
export SOSTOOLDIR=~/local

# SOSMSPTOOLDIR points to the directory where the MSP430 compiler
# tool chain is installed.  
export SOSMSPTOOLDIR=$SOSTOOLDIR

# Add the ./bin directory of the toolchain into the PATH
export PATH=$SOSTOOLDIR/bin:$PATH
code~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

NOTE: The lines below are for *Intel* based Mac.

[c]
code~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# SOSROOT points to the SOS 2.x directory downloaded on your system
export SOSROOT=~/sos-2x

# SOSTOOLDIR points to the directory where you want to install the toolchain.
# Keeping it in your home directory removes the need to have administrator
# (or root) privileges while installing the toolchain.
export SOSTOOLDIR=~/local

# SOSMSPTOOLDIR points to the directory where the MSP430 compiler
# tool chain is installed. 
export SOSMSPTOOLDIR=$SOSTOOLDIR/msp430

# Add the ./bin directory of the toolchain into the PATH
export PATH=$SOSTOOLDIR/bin:$SOSMSPTOOLDIR/bin:$PATH
code~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

IMPORTANT: Make sure that the environment variables are set by either closing and 
reopening your terminal or sourcing the file with source ~/.profile. Next, create 
that folder with the following command: 

[c]
code~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
mkdir $SOSTOOLDIR
code~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Install Libraries for Cross-compilation
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

- The AVR Tool Chain for Mica2 and Micaz
	* You will now need to install the following tool chain for cross compiling SOS 
	to the AVR target. Note that SOS tool chain is sensitive to versions. You are 
	free to experiment with more recent versions of these tools, but the SOS team 
	currently supports the versions listed below:
		. binutils-2.15
		. gcc-core-3.4.3
		. avr-libc-1.4.5
	* Make sure that you have defined the environment variables SOSTOOLDIR and
	SOSROOT.
	* To install the above tools, execute in terminal:

[c]
code~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
cd $SOSROOT/tools/src/avrgcc
source avrgcc.sh
code~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	
TIP: Open the avrgcc.sh script in a text editor to see the sequence of
commands followed to download, compile and install the required tools.
It also copies the correct pre-compiled binary of uisp which is 
required to program the embedded target. 

- The MSP430 Tool Chain for TMote Sky
	* Make sure that you have defined the environment variable SOSTOOLDIR as described above.
	* To install the toolchain, execute iin terminal:

[c]
code~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
cd $SOSROOT/tools/src/mspgcc
source build-mspgcc.sh install
code~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

NOTE: It is a modified copy of the msp430 build script from TinyOS 1.x. For *Intel based Mac*, 
it downloads a pre-compied binary of the tool chain from an external website (thanks to 
link:http://userfs.cec.wustl.edu/~kak1/Black_Site/Home.html[Kevin Klues]),
and extracts it to $SOSTOOLDIR/msp430.

	* Link the msp430 software bootstrap loader (bsl) by executing the following command:

[c]
code~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
ln -s $SOSROOT/tools/src/mspgcc-pybsl/bsl.py $SOSTOOLDIR/bin/msp430-bsl
code~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

	* Download the FTDI chip drivers from link:http://www.ftdichip.com/Drivers/VCP.htm[here].
	Select the file relevant to your OS. These are used to program the TMote over USB.

Configure SOS Utilities
~~~~~~~~~~~~~~~~~~~~~~~

- Execute in terminal:

[c]
code~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
cd $SOSROOT/tools/src/
sh sostools.sh
code~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


[[windows]]

Windows XP
----------

Obtain SOS 2.x
~~~~~~~~~~~~~~

- Install link:http://winavr.sourceforge.net/[WinAVR]. 
The main page links to the source forge page from which you can 
download the WinAVR installer. This adds tools for cross compiling to 
the AVR chip set used on Mica2 and MicaZ nodes. 

- Install link:http://www.cygwin.com/[cygwin].
- Use the Cygwin _setup_ utility (same program used to install cygwin) to 
update the installation with additional packages:
	* Select _gcc_ from devel
	* Select _make_ from devel
	* Select _binutils_ from devel
	* Select _perl_ from devel
	* Select _subversion_ from devel
	* Select _flex_ from devel
	* Select _wget_ from web

NOTE: This creates a basic build environment within Cygwin for development of C programs. 
The following instructions are executed within cygwin, unless specified otherwise.

- Checkout the SOS 2.x source. Use the following command for anonymous
checkout:

[c]
code~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
svn co svn://projects.nesl.ucla.edu/sos-2x/trunk sos-2x
code~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

- Setup some environment variables in cygwin before proceeding further. The installation
scripts depend on these variables for correct functioning. Edit the file
~/.bashrc with your favorite editor and add the following line
(you might have to change some paths depending on your setup):

[c]
code~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# SOSROOT points to the SOS 2.x directory downloaded on your system
export SOSROOT=~/sos-2x

# SOSTOOLDIR points to the directory where you want to install the toolchain.
# Keeping it in your home directory removes the need to have administrator
# (or root) privileges while installing the toolchain.
export SOSTOOLDIR=~/local

# SOSMSPTOOLDIR points to the directory where the MSP430 compiler
# tool chain is installed. This is assuming that you install
# mspgcc in its default location (C:\mspgcc). The link
# for downloading mspgcc is provided below.
export SOSMSPTOOLDIR=/cygdrive/c/mspgcc

# Add the ./bin directory of the toolchain into the PATH
export PATH=$SOSTOOLDIR/bin:$SOSMSPTOOLDIR/bin:$PATH
code~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

NOTE: Make sure that the environment variables are set by either closing and 
reopening your terminal or sourcing the file with source ~/.bashrc. Next, create 
that folder with the following command: 

[c]
code~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
mkdir $SOSTOOLDIR.
code~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Install Libraries for Cross-compilation
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
- AVR tool chain for Mica2 and Micaz
	* Already installed with WinAVR above.
	* Download a patched version of uisp from 
	link: https://projects.nesl.ucla.edu/view/viewcvs.cgi/sos-2x/trunk/doc/executables/uisp/winxp/uisp.exe?rev=164[here].
	This patched version is required for use of the CrossBow programming boards. 
	Save the binary into the "/usr/bin" directory of the Cygwin installation,
	and modify its permissions to make it executable (chmod +x /usr/bin/uisp.exe), 
	if required.

- MSP430 tool chain
	* Download and install mspgcc from 
	link:http://mspgcc.sourceforge.net/manual/c49.html#windows-installation[here]. 

IMPORTANT: Both WinAVR and mspgcc also come with their own versions of cygwin1.dll
file. This may not work correctly with the latest cygwin1.dll that comes with
cygwin. So, you will probably get a fatal error while trying to execute msp430-gcc. 
To avoid this, search for cygwin1.dll, and rename all the versions of
this file, found in all the directories *EXCEPT* the one in cygwin/bin, to cygwin1_backup.dll.

	* Download the FTDI chip drivers from link:http://www.ftdichip.com/Drivers/VCP.htm[here].
	Select the file relevant to your OS. These are used to program the TMote over USB.

Configure SOS Utilities
~~~~~~~~~~~~~~~~~~~~~~~

- Execute in cygwin:

[c]
code~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
cd $SOSROOT/tools/src/
sh sostools.sh
code~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

