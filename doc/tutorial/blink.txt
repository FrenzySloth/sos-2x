Blink Module
============

GSR Friedman once described sensor networks with his observation, ``Sensor
networks are about making LEDs blink.''  Sensor networks have much more to
offer than blinking LEDs, but they do provide a good starting point.  This
tutorial provides a high level walkthrough of a simple SOS module.  This
tutorial will introduce: 

- link:<module_tour>[Blink Module Tour]
- link:<installing_and_running>[Installing and Running Blink]
- link:<challenge>[SOS Challenge Problems]

This tutorial assumes that you have a full installation of SOS up and
running on your computer.  For more information on this look at the SOS
link:../install.html[Installation Guide].  Source for this tutorial is
available in `$SOSROOT/modules/demos/blink`.

anchor:module_tour

Blink Module Tour
-----------------

User applications in SOS take the form of one or more modules. Each module
acts as a message handler that can communicate with other modules and the
kernel. Modules can be inserted, updated, and removed from sensor nodes at
runtime.  Modules are written using standard C. 

Includes and State
~~~~~~~~~~~~~~~~~~

All modules should include `sys_module.h` that defines the kernel functions
available to SOS modules.  Documentation for the API provided by this file
is available at link:XXX[XXX].  Many projects will also include one or more
local header files containing module specific structures and constants.

Static state for a module is declared in advance in a single 'state'
structure.  The state structure for the blink module notes it's process ID
and the state of the LEDs.

[c]
source~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
typedef struct {
    uint8_t pid;
    uint8_t state;
} app_state_t;
source~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


Module Header
~~~~~~~~~~~~~

SOS modules include a header used at insertion time to help link the module into
the running system.  This SOS header should be included in all modules.
Here is the header used within the blink module:

[c]
source~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
static mod_header_t mod_header SOS_MODULE_HEADER = {
    .mod_id         = DFLT_APP_ID0,
    .state_size     = sizeof(app_state_t),
    .num_timers     = 1,
    .num_sub_func   = 0,
    .num_prov_func  = 0,
    .platform_type  = HW_TYPE /* or PLATFORM_ANY */,
    .processor_type = MCU_TYPE,
    .code_id        = ehtons(DFLT_APP_ID0),
    .module_handler = blink_msg_handler,
};
source~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

There is more information on the link:XXX[XXX] available.

Message Handler
~~~~~~~~~~~~~~~

The main function in a module is the message handler that uses a switch
statment to dispatch incoming messages to module specific message handlers.
In the blink module the module handler is function is called
`blink_msg_handler`.

Every module should handle the `MSG_INIT` and `MSG_FINAL` messages.
`MSG_INIT` is sent to a module by the kernel when the module is first
loaded, while `MSG_FINAL` is sent by the kernel immediatly before the module
is unloaded.  A third message type used in this module is
`MSG_TIMER_TIMEOUT` provided by the system timer.  More information on
common messages used in SOS modules and how to declare module specific
messages is available at link:XXX[XXX].

The message handler takes as input the module's state that is maintained by
the SOS kernel and a message from the SOS scheduler.  It dispatches the
massege to the approapriate handler based on its type.

The MSG_INIT handler initializes the module's state and timer.

The MSG_FINAL handler stops the timer used by the blink module.

The MSG_TIMER_TIMEOUT handler updates the module's state and turns on or off the
green LED based on the state value. 

SOS System API
~~~~~~~~~~~~~~

The blink module uses three system functions: `sys_led`, `sys_timer_start`, and
`sys_timer_stop`.  These functions are used to manipulate LEDs, start
timers, and stop timers respectivly.  More information on the system API
provided by SOS can be found at link:XXX[XXX].

Header Grabber
~~~~~~~~~~~~~~

Modules can be compiled into custom SOS kernels to ease simulation and
debugging.  A header grabber function is a stylized way used in SOS modules
to expose the SOS module header information for a file to the SOS kernel for
static compilation.  The header grabber for blink is:

[c]
source~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#ifndef _MODULE_
mod_header_ptr blink_get_header()
{
  return sos_get_header_address(mod_header);
}
#endif
source~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

anchor:installing_and_running

Installing and Running Blink
----------------------------

Modules are run as applications ontop of the SOS kernel.  Users can run do
this within an easy to use simulator provided within SOS, a cycle accurate
simulator with the help of Avrora, or on actual hardware including the Mica2
node.  The following links provide more deatails on each of these options.

- link:blink_sim.html[Running blink in the SOS simulator]
- link:blink_avrora.html[Running blink in the Avrora simulator]
- link:blink_mica2.html[Running blink on a Mica2 node]

anchor:challenge

SOS Challenge Problems
----------------------

Extend the blink module the blink the LED at a rate of once every 500ms.
Try taking a look at link:XXX[XXX] for more informatino on the timer API.

Modify the module to blink the green LED once every 3 seconds and the red
LED once every 7 seconds by starting two independent timers.  Look at
link:XXX[XXX] for more information on how to handle multiple timers.

