SOS Simulation of the Surge Application
=======================================

The SOS simulation framework does not support simulated sensor streams;
this tutorial will only use the `tree_routing` and `surge` modules. This is
sufficient to learn a fair bit more about the SOS simulation framework.

Wrapping Revisited
------------------

The tutorial for link:blink_sim.html[simulating blink in SOS] describes wrapping
modules within a configuration for simulation. For more complex
applications this can quickly become tedious. SOS includes a script that
will create custom simulation configurations on the fly.  This script is
located in `$SOSROOT/config/wrap_module.pl`.  The script can be used to
construct a custom simulation configuration for the surge module:

[c]
code~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
cd $SOSROOT/config
mkdir surgeSim
cd surgeSim/
CFLAGS="-DSOS_TREE_ROUTING_DEBUG" \
INCDIR="-I$SOSROOT/modules/sensordrivers/mts310/include/" \
../wrap_module.pl neighbor tree_routing surge

    found neighbor at ../../modules/routing/neighbor/neighbor.c
    found tree_routing at ../../modules/routing/tree_routing/tree_routing.c
    found surge at ../../modules/demos/surge/surge.c
    Makefile and module_test_app.c generated
code~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The simulation configuration wrapping script takes as input the modules that
should be started by the configuration.  The module name is simply the name of
the .c file implementing the module with the .c removed.  The script will
attempt to locate these modules, insert them into a configuration, and generate
a Makefile.  Note that the configuration will start the modules in the order in
which they are specified to the tool.  In this example the
`neighbor`,`tree_routing` and `surge` modules are used. The script notes what
file it is using for each module so that the user can look for potential
mismatches that may require editing of the generated Makefile by hand.
Finally, build-specific defines can be included by setting them as environment
variables.  In this situation the CFLAGS variable is set to enable debugging
output in the tree routing module and INCDIR variable includes the required
sensor board driver header files.

For more information run `$SOSROOT/config/wrap_module.pl` without
any parameters. 

To build this simulation configuration use: 

[c]
code~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
make sim
code~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Running the SOS Simulation 
~~~~~~~~~~~~~~~~~~~~~~~~~~

A topology file is used to allow more than one node to be simulated with
nonuniform network connectivity.  The format of the topology file that is
used by the SOS simulation framework is:

[c]
source~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Comments on a line starting with a # sign
num_nodes
node_id base_unit x_loc y_loc z_loc radio_range_squared
node_id base_unit x_loc y_loc z_loc radio_range_squared
...
source~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The topology can include comments by beginning the line with a # sign.
The first non-comment line is the number of nodes defined by the topology
file.  Each subsequent line describes a specific node.

num_nodes:-
    The number of nodes that are defined by this topology file.  This
    should be the first non-comment line of the file.

node_id:- 
    ID of the node.

base_unit:-
    Base unit of measure.  For most situations this can simply be
1.

x_loc:-
    X location of the node.

y_loc:-
    Y location of the node.

z_loc:-
    Z location of the node.

radio_range_squared:-
    The radio range of the node squared.  By default the SOS simulation
    framework will deliver packets with 100% reliability up to this distance,
    and with 0% reliability to any location outside of this distance.

The following is the topology file used to test the surge application:

[c]
source~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
##
# Format:
#
# First line is the number of nodes
#
# Rest of lines have following format
# node_id base_unit x_loc y_loc z_loc radio_range_squared
###
9
1  1 0  00 0 401 
2  1 0  20 0 401 
3  1 0  40 0 401 
4  1 20 0  0 401 
5  1 20 20 0 401 
6  1 20 40 0 401 
7  1 40 0  0 401 
8  1 40 20 0 401 
9  1 40 40 0 401 
source~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Each node in the SOS simulation framework runs as its own process.
Thus, one can use multiple terminals to start the nodes or multiple nodes
can be started as background processes from a shell script.  The following
is a simple shell script to start a 5 node simulation:

[c]
code~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./module_test_app.exe --file topo.def --node_address 1 --packet_loss 90 &
./module_test_app.exe --file topo.def --node_address 2 --packet_loss 95 &
./module_test_app.exe --file topo.def --node_address 3 --packet_loss 80 &
./module_test_app.exe --file topo.def --node_address 4 --packet_loss 90 &
./module_test_app.exe --file topo.def --node_address 5 --packet_loss 95 &
code~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Note: The packet_loss flag above specifies the how many of the messages will be
delivered. For example, 90 specifies a 90 percent packet delivery rate. 

This will result in output to the terminal describing each node's state.
The output is a bit jumbled since all nodes are outputting to the same
terminal.  Within a minute or two the routing tree should stabilize showing
how surge data would be routed through this network.

By running each of the above commands in a different term, this can be
made more clear.  A call to `pkill module_test_app` will stop the
simulation.

Next: link:surge_avrora.html[Running surge in the Avrora simulator]
