#!/usr/bin/perl -w
#
# This program changes the mote ID of a SOS image. It is used to 
# install a program for a specific mote.
# This program was copied from TinyOS distribution
# Therefore, the license follows INTEL-LICENSE.txt
use strict;

# default to backward compatability mode
# print usage if we have the wrong number of arguments
if( @ARGV < 3 ) {
    print "usage: set-mote-id [exe_in] [exe_out] [node_address] ...\n";
  exit 0;
}

# get the args and default variables set up
my $exein = shift @ARGV;
my $exeout = shift @ARGV;
my %user_symbols = ();
for my $value (@ARGV) {
  my $name = 'node_address';
  ($name,$value) = ($1,$2) if $value =~ /^([^=]+)=(.*)/;
  $value = hex $value if $value =~ /^0x/;
  $user_symbols{$name} = $value;
}
my $segment_vma = undef;
my $segment_lma = undef;
my $segment_off = undef;

# if in compatability mode, derive the names of the exes from the srecs

# find the data section
open( SECTS, "msp430-objdump -h $exein |" )
  or die "Cannot extract section information: $!\n";
while(<SECTS>) {
  if( /^\s*\d+\s+\.data\s+\S+\s+(\S+)\s+(\S+)\s+(\S+)/ ) {
    $segment_vma = hex $1;
    $segment_lma = hex $2;
    $segment_off = hex $3;
    last;
  }
}
close(SECTS);
die "Could not find data section in $exein, aborting.\n"
  unless defined $segment_vma && defined $segment_lma && defined $segment_off;

# build a hash of all data segment symbols to their address and size
my %exe_symbols = ();
open( SYMBOL, "msp430-objdump -t $exein |" )
  or die "Cannot extract symbol information: $!\n";
while(<SYMBOL>) {
  if( /^(\S+)\s+\S+\s+\S+\s+\.data\s+(\S+)\s+(\S+)\s*$/ ) {
    $exe_symbols{$3} = { addr => hex($1), size => hex($2) };
  }
}
close(SYMBOL);

# slurp the input exe
open (FILE_IN, "<$exein") or die "Could not open $exein: $!\n";
binmode FILE_IN;
my $exe = join("",<FILE_IN>);
close( FILE_IN );

# change the desired symbols at their file offsets
for my $symbol (sort keys %user_symbols) {
  my $value = $user_symbols{$symbol};
  if( defined $exe_symbols{$symbol} ) {
    my $addr = $exe_symbols{$symbol}->{addr};
    my $size = $exe_symbols{$symbol}->{size};
    my $filepos = $segment_off + ($addr - $segment_vma);
    my $bytes = substr( pack("V", $value) . ("\000" x $size), 0, $size );
    substr( $exe, $filepos, $size ) = $bytes;
  } else {
    warn "Could not find symbol $symbol in $exein, ignoring symbol.\n";
  }
}

# barf the output exe
open (FILE_OUT, ">$exeout") or die "Could not open $exeout: $!\n";
binmode FILE_OUT;
print FILE_OUT $exe;
close( FILE_OUT );

