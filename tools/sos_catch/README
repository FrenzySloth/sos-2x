README
------
SOS Catch is a tool for connecting custom message handlers to an SOS server.

AUTHOR
------
Written by Peter Mawhorter (code largely copied from test_sossrv_client.c). If
you find problems with the code or would like extra functionality, send
mail to pmawhworter@cs.hmc.edu or the sos-users mailing list.

USAGE
-----
./sos_catch.exe [-h] [-cPORT] [-rADDRESS]

Flag summary:
  -cPORT      Connect  Connect to sossrv on port PORT. Default is 7915.
  -h          Help     Display this message and quit.
  -rADDRESS   Remote   Connect to sossrv at ADDRESS (a dotted-decimal IP
                       address). Default is localhost.

ABOUT
-----
This code is a simplification of the sos_server API. At the moment, it is
configured to subscribe to messages from a running sossrv.exe and print the
data contained within Surge messages recieved. Running it while you have a
newtork of motes sending Surge data to the base station should allow you to see
the actual Surge data. The tool's purpose is to simplify the writing of C code
for handling SOS messages: just write a function called "catch" that has the
same specs as the catch function in the catch_surge.c file. Then change the
include statement in sos_catch.c to include your custom code instead of
catch_surge.c. You may have to alter the makefile so that your code will be
able to find the headers it needs. Finally, recompile sos_catch. Then new
executable should subscribe your function to all SOS messages. If you only want
to process a certain type of message, use conditionals in your catch function.

ALTERNATE SETUPS
----------------
Also included is surge_dump.c. This is an alternate implementation of
catch_surge.c which writes message information into a file instead of printing
it to the console. To use it, just change the line in sos_catch.c that includes
catch_surge.c to include surge_dump.c instead. Feel free to use surge_dump.c as
a model for writing your own message recording functionality.

For those interested in databases, there is also a file surge_db.c which works
just like catch_surge.c and surge_dump.c but wrties to a database instead of
the screen or a file. It uses the freely available SQLite3 database software
which creates a database in a single file. To use surge_db as the catching
function, you'll need to first set up a database. This can be accomplished by
typing "make setup_db.exe" and then running the resulting "setup_db.exe" file.
The name of the database file must be set the same in both setup_db.c and
surge_db.c, but it can be changed from the default "messages.sql". If the
make command for setup_db.exe fails with a linker error, you'll need to change
the library search path in the make file: see the comments in the make file
about that. Once the database file has been created, you can compile using
"make ppc" just like normal, assuming that you've changed the #include line
in sos_catch.c to include surge_db.c instead of catch_surge.c, and running
sos_catch.exe should then put messages into the database. You can use the
sqlite3 command-line tool to look at the database or write your own programs
to read it (Python has built-in sqlite3 support as of version 2.5). As with
surge_dump.c, feel free to write your own database code using this as a starting
point.

TESTING
-------
Run the SOS Surge tutorial at:

https://projects.nesl.ucla.edu/public/sos-2x/doc/tutorial/surge_mica2.html

Once you're getting messages at the base station (you'll see them appear in the
sos_server terminal), run sos_catch.exe in another terminal. For each message
printed to the sos_server screen, a message should be printed to the sos_catch
screen. The sos_catch printout should look similar, and if the message is a
Surge message (type 34), the sos_catch window should display a detailed listing
of the entire message contents, including a line for Reading which contains the
sensor reading. Now cover up the photosensor on the MTS310 and watch the
reading number change in the Surge packets.

